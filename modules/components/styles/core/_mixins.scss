@mixin tag-input-theme($theme) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    position: relative;

    transition: if (map-get($theme, transition), all map-get($theme, transition-duration));

    padding: map-get($theme, 'container-padding');
    min-height: map-get($theme, 'container-height');

    cursor: text;

    border-bottom: map-get($theme, 'container-border-bottom');

    &:focus {
        outline: 0;
    }

    &.ng2-tag-input--focused {
        border-bottom: map-get($theme, 'container-border-bottom-focused');
    }

    &.ng2-tag-input--invalid {
        border-bottom: map-get($theme, 'container-border-bottom-invalid');
    }

    &.ng2-tag-input--loading {
        border: none;
    }

    form {
        margin: map-get($theme, 'container-margin');
    }

    .ng2-tags-container {
        flex-wrap: wrap;
        display: flex;
    }

    .ng2-tag-input__error-message {
        font-size: map-get($theme, 'error-message-font-size') or $error-message-font-size;
        color: map-get($theme, 'error-message-color') or $error-message-color;
        margin: map-get($theme, 'error-message-margin') or $error-message-margin;   
    }
}

@mixin tag-theme($theme) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;

    font-family: map-get($theme, 'font-family');
    font-weight: map-get($theme, 'font-weight');
    font-size: map-get($theme, 'font-size');
    letter-spacing: map-get($theme, 'letter-spacing');

    outline: 0;
    color: map-get($theme, 'color');
    cursor: pointer;
    border-radius: map-get($theme, 'border-radius');
    transition: all 0.3s;
    position: relative;

    margin: map-get($theme, 'margin');
    padding: map-get($theme, 'padding');

    height: map-get($theme, 'height');
    line-height: map-get($theme, 'line-height');

    user-select: none;
    overflow: hidden;

    background: map-get($theme, 'background');

    &:not(.readonly):not(.tag--editing):focus {
        background: map-get($theme, 'background-focused');
        color: map-get($theme, 'color-focused');
    }

    &:not(.readonly):not(.tag--editing):active {
        background: map-get($theme, 'background-active');
        color: map-get($theme, 'color-active');
    }

    &:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {
        background: map-get($theme, 'background-hover');
        color: map-get($theme, 'color-hover');
    }

    &.readonly {
        cursor: default;
    }

    &.readonly:focus {
        outline: 0;
    }

    &.tag--editing {
        background-color: map-get($theme, 'background-editing');
        cursor: text;
    }

    &:focus {
        outline: 0;
    }
}

@mixin tag-input-form-theme($theme) {
    display: inline;
    vertical-align: middle;

    border: map-get($theme, 'input-border');
    padding: map-get($theme, 'input-padding');
    height: map-get($theme, 'input-height');

    font-size: map-get($theme, 'input-font-size');
    font-family: map-get($theme, 'font-family');

    &:focus {
        outline: 0;
    }
}

@mixin icon-theme($theme) {
    width: map-get($theme, 'width');
    height: map-get($theme, 'height');
    transition: map-get($theme, 'transition');
    display: map-get($theme, 'display');

    path {
        fill: map-get($theme, 'fill');
    }

    svg {
        vertical-align: bottom;
        height: 34px;
    }
}

@mixin icon-theme-focused($theme) {
    path {
        fill: map-get($theme, 'fill-focus');
    }
}